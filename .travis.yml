---
sudo: required
dist: trusty

services:
  - docker

before_install:
  - sudo apt-get install -y mysql-client

script:
  # Build docker image
  - cd 5.7/
  - docker build -t maestrano/mysql:travis . > /dev/null 2>&1

  # Configuration
  - HOST_PUB_IP=$(ifconfig | grep "eth0 " -A 1 | grep "inet " | cut -d':' -f2 | cut -d' ' -f1)
  - PORT_NODE_0=33000
  - PORT_NODE_1=33001
  - PORT_NODE_2=33002

  #=============================================
  # Test standalone MySQL
  #=============================================
  # Start standalone instance
  - docker run -d -p $PORT_NODE_0:3306 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=app_db --name m0 maestrano/mysql:travis

  # Wait for standalone instance to be up
  - for i in {30..0}; do mysql -P $PORT_NODE_0 -h $HOST_PUB_IP -u root -proot -e 'SELECT 1' &> /dev/null && break; sleep 1; done
  - if [ "$i" = 0 ]; then echo 'MySQL startup process failed.'; exit 1; fi

  # Create data
  - mysql -P $PORT_NODE_0 -h $HOST_PUB_IP -u root -proot -e "create table app_db.dummy (id varchar(10));"
  - mysql -P $PORT_NODE_0 -h $HOST_PUB_IP -u root -proot -e "show tables in app_db;"
  - mysql -P $PORT_NODE_0 -h $HOST_PUB_IP -u root -proot -e "insert into app_db.dummy VALUES(RAND(1000))"
  - "record_count=$(mysql -P $PORT_NODE_0 -h $HOST_PUB_IP -u root -proot -BNe 'SELECT COUNT(*) FROM app_db.dummy')"
  - '[ "$record_count" == "1" ] || exit 1'

  # Destroy container
  - docker rm -f m0

  #=============================================
  # Test MySQL cluster - Master-Master
  #=============================================
  # TODO: mount volumes
  # Start cluster instance 1
  - docker run -d -p $PORT_NODE_1:3306 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=app_db -e SELF_HOST=$HOST_PUB_IP -e SELF_PORT=$PORT_NODE_1 -e MYSQL_SERVER_ID=1 --name m1 maestrano/mysql:travis

  # Wait for cluster instance 1 to be up
  - for i in {30..0}; do mysql -P $PORT_NODE_1 -h $HOST_PUB_IP -u root -proot -e 'SELECT 1' &> /dev/null && break; sleep 1; done
  - if [ "$i" = 0 ]; then echo 'MySQL startup process failed.'; exit 1; fi

  # Create data
  - mysql -P $PORT_NODE_1 -h $HOST_PUB_IP -u root -proot -e "create table app_db.dummy (id varchar(10));"
  - mysql -P $PORT_NODE_1 -h $HOST_PUB_IP -u root -proot -e "show tables in app_db;"
  - mysql -P $PORT_NODE_1 -h $HOST_PUB_IP -u root -proot -e "insert into app_db.dummy VALUES(RAND(1000))"
  - "record_count=$(mysql -P $PORT_NODE_1 -h $HOST_PUB_IP -u root -proot -BNe 'SELECT COUNT(*) FROM app_db.dummy')"
  - '[ "$record_count" == "1" ] || exit 1'

  # Create replica and insert data on master in parallel
  - docker run -d -p $PORT_NODE_2:3306 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=app_db -e SELF_HOST=$HOST_PUB_IP -e SELF_PORT=$PORT_NODE_2 -e PEER_HOST=$HOST_PUB_IP -e PEER_PORT=$PORT_NODE_1 -e MASTER_MASTER_REP=true -e MYSQL_SERVER_ID=2 --name m2 maestrano/mysql:travis
  - for i in {1000..0}; do mysql -P $PORT_NODE_1 -h $HOST_PUB_IP -u root -proot -e "insert into app_db.dummy VALUES(RAND(1000))" 2>/dev/null; done

  # Wait for cluster instance 2 to be up
  - for i in {30..0}; do mysql -P $PORT_NODE_2 -h $HOST_PUB_IP -u root -proot -e 'SELECT 1' &> /dev/null && break; sleep 1; done
  - if [ "$i" = 0 ]; then echo 'MySQL startup process failed.'; exit 1; fi

  # Ensure counts are equal
  - "count_node_1=$(mysql -P $PORT_NODE_1 -h $HOST_PUB_IP -u root -proot -BNe 'SELECT COUNT(*) FROM app_db.dummy')"
  - "count_node_2=$(mysql -P $PORT_NODE_2 -h $HOST_PUB_IP -u root -proot -BNe 'SELECT COUNT(*) FROM app_db.dummy')"
  - '[ "$count_node_1" == "$count_node_2" ] || exit 1'
  - count_pre_insert=$count_node_1

  # Insert data on instance 2
  - for i in {20..0}; do mysql -P $PORT_NODE_2 -h $HOST_PUB_IP -u root -proot -e "insert into app_db.dummy VALUES(RAND(1000))" 2>/dev/null; done

  # Ensure counts are equal
  - "count_node_1=$(mysql -P $PORT_NODE_1 -h $HOST_PUB_IP -u root -proot -BNe 'SELECT COUNT(*) FROM app_db.dummy')"
  - "count_node_2=$(mysql -P $PORT_NODE_2 -h $HOST_PUB_IP -u root -proot -BNe 'SELECT COUNT(*) FROM app_db.dummy')"
  - echo $count_node_1
  - echo $count_node_2
  - docker logs -f m1
  - docker logs -f m2
  - '[ $count_node_1 -eq $count_node_2 ]'
  - '[ $count_node_1 -gt $count_pre_insert ]'
